// Generated by CoffeeScript 1.3.1
(function() {
  var ansi, baseColor, blue, bright, brightBlue, brightCyan, brightGreen, brightMagenta, brightRed, brightWhite, brightYellow, coffee, cyan, darkBlue, darkCyan, darkGreen, darkMagenta, darkRed, darkWhite, darkYellow, delayExit, escapeRegExp, exports, extraLines, format1, format2, fs, green, logStackEntry, magenta, normal, padLeft, red, reset, white, yellow,
    __slice = [].slice;

  fs = require('fs');

  coffee = null;

  ansi = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return "\x1B[" + args.join(';') + "m";
  };

  reset = ansi(0);

  bright = ansi(1, 1);

  normal = ansi(1, 22);

  red = ansi(1, 31);

  green = ansi(1, 32);

  yellow = ansi(1, 33);

  blue = ansi(1, 34);

  magenta = ansi(1, 35);

  cyan = ansi(1, 36);

  white = ansi(1, 37);

  darkRed = red + normal;

  darkGreen = green + normal;

  darkYellow = yellow + normal;

  darkBlue = blue + normal;

  darkMagenta = magenta + normal;

  darkCyan = cyan + normal;

  darkWhite = white + normal;

  brightRed = red + bright;

  brightGreen = green + bright;

  brightYellow = yellow + bright;

  brightBlue = blue + bright;

  brightMagenta = magenta + bright;

  brightCyan = cyan + bright;

  brightWhite = white + bright;

  baseColor = brightWhite;

  extraLines = 2;

  delayExit = 1000;

  format1 = /^\s*at (.*) \(([^\)]+):(\d+):(\d+)\)$/;

  format2 = /^\s*at ()([^\)]+):(\d+):(\d+)$/;

  exports = module.exports = function(callback) {
    if (callback instanceof Error) {
      return exports.handler(callback);
    } else {
      process.on('uncaughtException', exports.handler);
      return process.nextTick(callback);
    }
  };

  exports.handler = function(exception) {
    var entry, message, stack, _i, _len, _ref;
    console.log("\n" + baseColor + "      ,-- $ " + brightCyan + (process.argv.join(' ')) + reset);
    stack = exception.stack.split("\n");
    message = stack.shift();
    _ref = stack.reverse();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      entry = _ref[_i];
      if (entry.match(format1) || entry.match(format2)) {
        try {
          logStackEntry(RegExp.$1, RegExp.$2, RegExp.$3, RegExp.$4);
        } catch (err) {
          console.log("Error while printing offending stack entry:");
          console.log(err.stack);
        }
      } else {
        console.log("" + baseColor + "      `-> " + entry + reset);
      }
    }
    console.log("" + baseColor + "      `-> " + brightRed + message + reset + "\n");
    return setTimeout(function() {
      return process.exit(1);
    }, delayExit);
  };

  logStackEntry = function(context, file, lineNumber, columnNumber) {
    var brightColor, code, coloredFile, cwd, cwdPattern, darkColor, i, line, lineIndex, lines, num, numColor, sep, wrappedContext, _i, _ref, _ref1, _ref2, _results;
    cwd = process.cwd();
    cwdPattern = new RegExp(escapeRegExp(cwd) + '[\\/\\\\]');
    _ref = file.slice(0, cwd.length) !== cwd ? [darkMagenta, brightMagenta] : file.slice(cwd.length + 1, cwd.length + 13) === 'node_modules' ? [darkYellow, brightYellow] : [darkGreen, brightGreen], darkColor = _ref[0], brightColor = _ref[1];
    coloredFile = darkColor + file.replace(cwdPattern, '').replace(/([^\/\\]+)$/, brightColor + '$1');
    wrappedContext = context ? " (" + context + ")" : '';
    console.log("" + baseColor + "      `-> " + coloredFile + baseColor + wrappedContext + reset);
    try {
      code = fs.readFileSync(file, "ascii");
    } catch (err) {
      if (err.code === 'ENOENT') {
        return;
      }
      throw err;
    }
    if (coffee == null) {
      coffee = require('coffee-script');
    }
    if (file.match(/\.coffee$/)) {
      code = coffee.compile(code);
    }
    lines = code.split("\n");
    lineIndex = lineNumber - 1;
    _results = [];
    for (i = _i = _ref1 = lineIndex - extraLines, _ref2 = lineIndex + extraLines; _ref1 <= _ref2 ? _i <= _ref2 : _i >= _ref2; i = _ref1 <= _ref2 ? ++_i : --_i) {
      if (i < 0) {
        continue;
      }
      if (i >= lines.length) {
        break;
      }
      numColor = darkWhite;
      num = padLeft(i + 1, ' ', 5);
      line = lines[i];
      if (i < lineIndex) {
        sep = '   ';
      } else if (i === lineIndex) {
        sep = ',--';
        numColor = brightRed;
        line = darkColor + line.slice(0, columnNumber - 1) + brightColor + line.slice(columnNumber - 1) + reset;
      } else if (i > lineIndex) {
        sep = '|  ';
      }
      _results.push(console.log("" + numColor + num + " " + baseColor + sep + reset + " " + line + reset));
    }
    return _results;
  };

  escapeRegExp = function(text) {
    return text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
  };

  padLeft = function(string, fill, length) {
    string = String(string);
    while (string.length < length) {
      string = fill + string;
    }
    return string;
  };

}).call(this);
